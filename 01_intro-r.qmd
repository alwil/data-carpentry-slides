---
title: "Getting Started with R(Studio)"
date: "2024-09-30"
---

```{r}
#| label: setup
#| include: false
library(here)
library(dplyr)
library(tidyr)
library(ggplot2)
interviews <- readr::read_csv(here("data/SAFI_clean.csv"))
interviews_plotting <- readr::read_csv(here("data/interviews_plotting.csv"))
percent_wall_type <- interviews_plotting %>%
    filter(respondent_wall_type != "cement") %>%
    count(village, respondent_wall_type) %>%
    group_by(village) %>%
    mutate(percent = (n / sum(n)) * 100) %>%
    ungroup()
percent_items <- interviews_plotting %>%
    group_by(village) %>%
    summarize(across(bicycle:car, ~ sum(.x) / n() * 100)) %>%
    pivot_longer(bicycle:car, names_to = "items", values_to = "percent")
```

## Why R? {.center}

. . .

It's a programming language/software that is **FREE** and open source! üéâ

. . .

It was created by statisticians for statistics üìä

. . .

Because it's **FREE** and open source and works with scripts, it's great for reproducibility üí™

. . .

Did I mention **FREE**?


## Ok... So why RStudio? {.center}

. . .

RStudio is an integrated development environment (IDE)

. . .

It's essentially a (much prettier) wrapper for the R software

. . .

R is integrated into RStudio, so you never actually have to open R[, which is a good thing...]{.fragment}

## Let's take the tour {.center}

![](https://media.giphy.com/media/ggtpYV17RP9lTbc542/giphy.gif)


## Organising working directory

![](https://raw.githubusercontent.com/alwil/22-10-24_dc-socialsci_LeidenDelftEur_Intro/main/assets/img/rstudio_project_files.jpeg)


## Basics of R {.center}
R is a language spoken by the R software

. . .

Software is not good at interpreting things

. . .


So we need to learn it's language to communicate EXACTLY
what we want

. . .


But unlike with a natural language, knowing a few R 'words' and 'phrases' 
can take us really far!

. . .

 
 It's a beginning of a journey! `r emo::ji("luggage")`

---

Things to look forward to:

```{r}
#| label: example-plot
#| echo: false
interviews_plotting %>% 
   ggplot(aes(x = no_membrs, y = number_items, color = village)) +
   geom_count() +
   theme_minimal()
```

---

Things to look forward to:

```{r}
#| label: example-plot3
#| echo: true
percent_items %>%
    ggplot(aes(x = village, y = percent, fill = items)) +
    geom_bar(stat = "identity", position = "dodge") +
    facet_wrap(~ items) +
    theme_bw() +
    theme(panel.grid = element_blank(),
          legend.position = "none")
```

---

Things to look forward to:

![Artwork by [@allison_horst](https://twitter.com/allison_horst)](img/many-qmd-to-output.png)


## Naming conventions

Characters, numbers, `_` and `.` allowed

. . .


Names cannot start with a number

. . .


Use of  `.` not recommended

. . .


Some names not allowed (e.g. `if`, `else`)

. . .


Others allowed, but not recommended (e.g. `weights`, `df`, `mean`)

. . .


Case sensitive: `Age` is different from `age`

. . .


Stick to the same convention
    

## Exercise 1

‚è∞ **3 mins**

Create two variables `r_length` and `r_width` and assign them values.

Create a third variable `r_area` and give it a value by multiplying `r_length`
and `r_width`.

`r countdown::countdown(minutes = 3, color_running_background  = "lightgreen", color_running_text = "black", color_finished_background = "red", color_finished_text =  "grey30")`

. . .

### Solution

```{r}
r_length <- 6
r_width <- 7
r_area <- r_length * r_width
```


## Exercise 2

‚è∞ **4 mins**

Type `?round` into the **console** to open the help page for the `round()` function.

Find the appropriate function to round `1.624` down to the nearest integer.

`r countdown::countdown(minutes = 4, color_running_background  = "lightgreen", color_running_text = "black", color_finished_background = "red", color_finished_text =  "grey30")`

. . .

### Solution

```{r}
floor(1.624)
```

## Data Types 

**numeric** (e.g. `3.14`) 

. . .

**character** (e.g. `'car'`)

. . .

**integer** (e.g. `50L`)

. . .


**logical** ( `TRUE` or `FALSE`)

. . .


**complex**


**raw**



## Exercise 3 {.smaller .scrollable}

‚è∞ **8 mins**

What will happen in each of the examples below?

üí° **Hint:** use `typeof()` to check the data type of your objects

```{r}
num_char <- c(1, 2, 3, "a")
num_logical <- c(1, 2L, 3, TRUE)
char_logical <- c("a", "b", "c", TRUE)
tricky <- c(1, 2, 3, "4")
```

Why does this happen?

`r countdown::countdown(minutes = 8, color_running_background  = "lightgreen", color_running_text = "black", color_finished_background = "red", color_finished_text =  "grey30")`

. . .

### Solution

Vectors can only contain a single data type.

R converts to a common denominator that loses as little information
as possible.

character < double < integer < logical

```{r exercise-3-sol}
num_char
num_logical
char_logical
tricky
```


## Exercise 4

‚è∞ **4 mins**

How many values in `combined_logical` are `"TRUE"` (as a string)?

```{r}
#| label: exercise-4
num_logical <- c(1, 2, 3, TRUE)
char_logical <- c("a", "b", "c", TRUE)
combined_logical <- c(num_logical, char_logical)
```

`r countdown::countdown(minutes = 4, color_running_background  = "lightgreen", color_running_text = "black", color_finished_background = "red", color_finished_text =  "grey30")`

. . .

### Solution

```{r exercise-4-sol}
combined_logical
```

The `TRUE` in `num_logical` gets converted to `1`, and then `"1"` when combined
with `char_logical`.


## Exercise 5 {.smaller}

‚è∞ **8 mins**

1. Using this vector of rooms, create a new vector with the NAs removed:

```{r exercise-5}
rooms <- c(1, 2, 1, NA, 3, 1, 3, 2, 8, NA, 1)
```

2. then calculate the `median`.

3. Use R to calculate how many elements of `rooms` are larger than 2.

`r countdown::countdown(minutes = 8, color_running_background  = "lightgreen", color_running_text = "black", color_finished_background = "red", color_finished_text =  "grey30")`

. . .

### Solution

```{r exercise-5-sol}
# 1
rooms_no_na <- rooms[!is.na(rooms)]
# or
rooms_no_na <- na.omit(rooms)

# 2
median(rooms, na.rm = TRUE) # or median(rooms_no_na)

# 3
rooms_above_2 <- rooms_no_na[rooms_no_na > 2]
length(rooms_above_2)
```

